/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author Warren
 */
public class Library extends javax.swing.JFrame {

    private final String url = "jdbc:postgresql://localhost:5434/postgres";
    private final String user = "zpillman";
    private final String password = "password";

    /**
     * Creates new form Library
     */
    public Library() {
        initComponents();
    }

    public Connection connect() throws SQLException {
        return DriverManager.getConnection(url, user, password);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        Library_CI = new javax.swing.JButton();
        Library_CO = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Library");
        setBounds(new java.awt.Rectangle(500, 100, 1000, 1000));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setText("Welcome to the Library");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(68, 118, 0, 0);
        getContentPane().add(jLabel1, gridBagConstraints);

        Library_CI.setText("Check In");
        Library_CI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Library_CIActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 31;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(55, 91, 614, 0);
        getContentPane().add(Library_CI, gridBagConstraints);

        Library_CO.setText("Check Out");
        Library_CO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Library_COActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipady = 31;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(55, 122, 0, 86);
        getContentPane().add(Library_CO, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Library_CIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Library_CIActionPerformed
CheckIn ci = new CheckIn();
ci.setVisible(true);
    }//GEN-LAST:event_Library_CIActionPerformed

    private void Library_COActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Library_COActionPerformed
CheckOut co = new CheckOut();
co.setVisible(true);
    }//GEN-LAST:event_Library_COActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Library.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Library.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Library.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Library.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Library().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Library_CI;
    private javax.swing.JButton Library_CO;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables


    /**
     * Get all rows in the Borrower Table
     */
    public List<Borrower> getAllBorrowers() {

        String SQL = "SELECT * FROM borrowers";

        List<Borrower> borrowers = null;

        try (Connection conn = connect();
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(SQL)) {
            // display borrower information
            borrowers = mapResultSetToBorrower(rs);
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }

        return borrowers;
    }

    /**
     * Find Borrower by his/her ID
     *
     * @param cardID
     */
    public List<Borrower> findBorrowerByID(int cardID) {
        String SQL = "SELECT * "
            + "FROM Borrowers "
            + "WHERE card_id = ?";

        List<Borrower> borrowersList = null;

        try (Connection conn = connect(); PreparedStatement pstmt = conn.prepareStatement(SQL)) {
            pstmt.setInt(1, cardID);
            ResultSet rs = pstmt.executeQuery();
            borrowersList = mapResultSetToBorrower(rs);
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }

        return borrowersList;
    }

    public List<Book> findBooksByIsbn(String isbn) {
        String SQL = "SELECT Books.isbn10, Books.title, Books.cover, Books.publisher, Books.pages, "
            + "Books.is_checked_out "
            + "FROM Books "
            + "JOIN Isbns ON Isbns.isbn10 = Books.isbn10 "
            + "WHERE Books.isbn10 = ? "
            + "OR Isbns.isbn13 = ?";

        List<Book> booksList = new ArrayList<>();

        try (Connection conn = connect(); PreparedStatement pstmt = conn.prepareStatement(SQL)) {
            pstmt.setString(1, isbn);
            pstmt.setString(2, isbn);

            ResultSet rs = pstmt.executeQuery();

            booksList = mapResultSetToBook(rs);
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }

        return booksList;

    }

    /**
     * Search Borrowers table for borrowers who contain the term
     *
     * @param term
     */
    public List<Borrower> searchBorrower(String term) {
        String SQL = "SELECT DISTINCT * "
            + "FROM Borrowers "
            + "WHERE first_name ILIKE '%?%'"
            + "OR last_name ILIKE '%?%'";

        List<Borrower> borrowersList = null;

        try (Connection conn = connect(); PreparedStatement pstmt = conn.prepareStatement(SQL)) {
            pstmt.setString(1, term);
            ResultSet rs = pstmt.executeQuery();
            borrowersList = mapResultSetToBorrower(rs);
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }

        return borrowersList;
    }

    /**
     * Search for Books where isbn/books.title/authors.full_name contain the term.
     *
     * @param term
     */
    public List<Book> searchBooksTerm(String term) {
        //append wildcards to search term
        term = "%" + term + "%";
        String SQL = "SELECT DISTINCT Books.isbn10, Isbns.isbn13, Books.title, Authors.full_name "
            + "FROM Books "
            + "JOIN Isbns ON Isbns.isbn10 = Books.isbn10 "
            + "JOIN BookAuthors ON Books.isbn10 = BookAuthors.isbn10 "
            + "JOIN Authors ON BookAuthors.author_id = Authors.author_id "
            + "WHERE (Authors.full_name ILIKE ? "
            + "OR Books.isbn10 ILIKE ? "
            + "OR Books.title ILIKE ? "
            + "OR Isbns.isbn13 ILIKE ? ) "
            + "AND NOT Books.is_checked_out";

        List<Book> booksList = new ArrayList<Book>();

        try (Connection conn = connect(); PreparedStatement pstmt = conn.prepareStatement(SQL)) {
            pstmt.setString(1, term);
            pstmt.setString(2, term);
            pstmt.setString(3, term);
            pstmt.setString(4, term);

            ResultSet rs = pstmt.executeQuery();

            while(rs.next()) {
                Book book = new Book();
                Author author = new Author();
                book.setIsbn10(rs.getString("isbn10"));
                book.setIsbn13(rs.getString("isbn13"));
                book.setTitle(rs.getString("title"));
                author.setFullName(rs.getString("full_name"));
                book.setAuthor(author);
                booksList.add(book);
            }
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }

        return booksList;
    }

    public void checkOutBook(int cardId, String isbn) {
        //first make sure the user hasn't checked out too many books
        String getBookLoansForCardIdSQL = "SELECT COUNT(*) AS books_checked_out "
            + "FROM BookLoans "
            + "WHERE BookLoans.card_id = ? ";

        int booksCheckedOut = 0;

        try (Connection conn = connect(); PreparedStatement pstmt = conn.prepareStatement(getBookLoansForCardIdSQL)) {
            pstmt.setInt(1, cardId);
            ResultSet rs = pstmt.executeQuery();
            while(rs.next()) {
                booksCheckedOut = rs.getInt("books_checked_out");
            }
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }

        if(booksCheckedOut > 3) {
            System.out.println("Error, That user has too many books checked out.");
            return;
        } /*else {
      System.out.println("The user is under the maximum checkout limit(3)!");
    }*/

        //Ensure the book isn't checked out already
        List<Book> books = findBooksByIsbn(isbn);

        for(Book book : books) {
            System.out.println(book);
        }

        Book bookFound = books.get(0);

        if(bookFound.isCheckedOut()) {
            System.out.println("Error, That book is already checked out.");
            return;
        }/* else {
      System.out.println("The book is available to checkout!");
    }*/

        String insertBookLoan = "INSERT INTO BookLoans(card_id, isbn10) "
            + "VALUES(?, ?)";

        try (Connection conn = connect(); PreparedStatement pstmt = conn.prepareStatement(insertBookLoan)) {
            pstmt.setInt(1, cardId);
            pstmt.setString(2 ,bookFound.getIsbn10());
            ResultSet rs = pstmt.executeQuery();
            //TODO Ensure the record was properly inserted.
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }

        String updateBookIsCheckedOut = "UPDATE Books SET is_checked_out = TRUE "
            + "WHERE Books.isbn10 = ? ";

        try (Connection conn = connect(); PreparedStatement pstmt = conn.prepareStatement(updateBookIsCheckedOut)) {
            pstmt.setString(1 , bookFound.getIsbn10());
            ResultSet rs = pstmt.executeQuery();
            //TODO Ensure the update went through.
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }

    }

    public List<BookLoan> findBookLoanByTerm(String term) {
        term = "%" + term + "%";
        String searchBookLoansByTerm = "SELECT BookLoans.loan_id, Borrowers.card_id, "
            + "Borrowers.first_name, Borrowers.last_name, Books.isbn10 FROM BookLoans "
            + "JOIN Books ON Books.isbn10 = BookLoans.isbn10 "
            + "JOIN Borrowers ON Borrowers.card_id = BookLoans.card_id "
            + "WHERE Borrowers.first_name ILIKE ? "
            + "OR Borrowers.last_name ILIKE ? "
            + "OR Books.isbn10 ILIKE ? ";

        List<BookLoan> bookLoans = new ArrayList<>();

        try (Connection conn = connect(); PreparedStatement pstmt = conn.prepareStatement(searchBookLoansByTerm)) {
            pstmt.setString(1, term);
            pstmt.setString(2, term);
            pstmt.setString(3, term);

            ResultSet rs = pstmt.executeQuery();

            while(rs.next()) {
                BookLoan bookLoan = new BookLoan();
                bookLoan.setLoanId(rs.getInt("loan_id"));
                bookLoan.setIsbn10(rs.getString("isbn10"));
                bookLoan.setCardId(rs.getInt("card_id"));
                bookLoans.add(bookLoan);
            }
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }

        return bookLoans;
    }

    public void checkInBook(int loan_id, String isbn10) {
        String updateBookLoansDateInSQL = "UPDATE BookLoans "
            + "SET date_in = CURRENT_DATE "
            + "WHERE BookLoans.loan_id = ?";

        try (Connection conn = connect(); PreparedStatement pstmt = conn.prepareStatement(updateBookLoansDateInSQL)) {
            pstmt.setInt(1, loan_id);

            ResultSet rs = pstmt.executeQuery();

            while(rs.next()) {
                System.out.println("Successful Update");
            }
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }

        String updateBooksIsCheckedOutSQL = "UPDATE Books SET is_checked_out = false "
            + "WHERE Books.isbn10 = ?";

        try (Connection conn = connect(); PreparedStatement pstmt = conn.prepareStatement(updateBooksIsCheckedOutSQL)) {
            pstmt.setString(1, isbn10);

            ResultSet rs = pstmt.executeQuery();

            while(rs.next()) {
                System.out.println("Successful Update");
            }
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }

    }

    private List<Borrower> mapResultSetToBorrower(ResultSet rs) throws SQLException{
        ArrayList<Borrower> listOfBorrowers = new ArrayList<Borrower>();

        while (rs.next()) {
            Borrower borrower = new Borrower();
            borrower.setCardId(rs.getInt("card_id"));
            borrower.setSsn(rs.getString("ssn"));
            borrower.setFirstName(rs.getString("first_name"));
            borrower.setLastName(rs.getString("last_name"));
            borrower.setEmail(rs.getString("email"));
            borrower.setAddress(rs.getString("address"));
            borrower.setCity(rs.getString("city"));
            borrower.setState(rs.getString("state"));
            borrower.setPhone(rs.getString("phone"));
            listOfBorrowers.add(borrower);
        }

        return listOfBorrowers;
    }

    private List<Author> mapResultSetToAuthor(ResultSet rs) throws SQLException{
        ArrayList<Author> listOfAuthors = new ArrayList<Author>();

        while (rs.next()) {
            Author author = new Author();
            author.setAuthorId(rs.getInt("author_id"));
            author.setFullName(rs.getString("full_name"));
            listOfAuthors.add(author);
        }

        return listOfAuthors;
    }

    private List<Book> mapResultSetToBook(ResultSet rs) throws SQLException{
        ArrayList<Book> listOfBooks = new ArrayList<Book>();

        while (rs.next()) {
            Book book = new Book();
            book.setIsbn10(rs.getString("isbn10"));
            book.setTitle(rs.getString("title"));
            book.setCover(rs.getString("cover"));
            book.setPublisher(rs.getString("publisher"));
            book.setPages(rs.getInt("pages"));
            listOfBooks.add(book);
        }

        return listOfBooks;
    }

    private List<Fine> mapResultSetToFine(ResultSet rs) throws SQLException{
        ArrayList<Fine> listOfFines = new ArrayList<Fine>();

        while (rs.next()) {
            Fine fine = new Fine();
            fine.setLoanId(rs.getInt("loan_id"));
            fine.setFineAmt(rs.getDouble("fine_amt"));
            fine.setPaid(rs.getBoolean("is_paid"));
            listOfFines.add(fine);
        }

        return listOfFines;
    }

    private List<BookLoan> mapResultSetToBookLoan(ResultSet rs) throws SQLException{
        ArrayList<BookLoan> listOfBookLoans = new ArrayList<BookLoan>();

        while (rs.next()) {
            BookLoan bookLoan = new BookLoan();
            bookLoan.setDateOut(rs.getDate("date_out"));
            bookLoan.setDueDate(rs.getDate("due_date"));
            bookLoan.setDateIn(rs.getDate("date_in"));
            bookLoan.setCardId(rs.getInt("card_id"));
            bookLoan.setLoanId(rs.getInt("loan_id"));
            bookLoan.setIsbn10(rs.getString("isbn10"));
            listOfBookLoans.add(bookLoan);
        }

        return listOfBookLoans;
    }
}
