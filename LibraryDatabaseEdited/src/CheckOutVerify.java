/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author Warren
 */
public class CheckOutVerify extends javax.swing.JFrame {

    int cardId;
    String isbn10;

    private final String url = "jdbc:postgresql://localhost:5434/postgres";
    private final String user = "zpillman";
    private final String password = "password";

    /**
     * Creates new form CheckOutVerify
     */
    public CheckOutVerify(String isbn10) {
        this.isbn10 = isbn10;
        initComponents();
    }

    public Connection connect() throws SQLException {
        return DriverManager.getConnection(url, user, password);
    }



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        CheckOutVerify_TextBox = new javax.swing.JTextField();
        CheckOutVerify_Continue = new javax.swing.JButton();
        CheckOutVerify_NewUser = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Enter Card Number");
        setBounds(new java.awt.Rectangle(500, 100, 500, 500));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel1.setText("Please enter card #");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(77, 148, 0, 0);
        getContentPane().add(jLabel1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 262;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(9, 73, 0, 72);
        getContentPane().add(CheckOutVerify_TextBox, gridBagConstraints);

        CheckOutVerify_Continue.setText("Continue");
        CheckOutVerify_Continue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckOutVerify_ContinueActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 21;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(23, 156, 0, 0);
        getContentPane().add(CheckOutVerify_Continue, gridBagConstraints);

        CheckOutVerify_NewUser.setText("New User");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = -1;
        gridBagConstraints.ipady = 21;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 156, 22, 0);
        getContentPane().add(CheckOutVerify_NewUser, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CheckOutVerify_ContinueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckOutVerify_ContinueActionPerformed
        cardId = Integer.parseInt(CheckOutVerify_TextBox.getText());

        //make sure the borrower exists
        List<Borrower> foundBorrower = findBorrowerByID(cardId);
        if(foundBorrower.isEmpty()) {
            System.out.println("Error, User does not exist.");
            return;
        }

        checkOutBook(cardId, isbn10);

        CheckOutSuccess cos = new CheckOutSuccess();
        cos.setVisible(true);
        dispose();
    }//GEN-LAST:event_CheckOutVerify_ContinueActionPerformed

    public List<Borrower> findBorrowerByID(int cardID) {
        String SQL = "SELECT * "
            + "FROM Borrowers "
            + "WHERE card_id = ?";

        List<Borrower> borrowersList = null;

        try (Connection conn = connect(); PreparedStatement pstmt = conn.prepareStatement(SQL)) {
            pstmt.setInt(1, cardID);
            ResultSet rs = pstmt.executeQuery();
            borrowersList = mapResultSetToBorrower(rs);
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }

        return borrowersList;
    }

    public void checkOutBook(int cardId, String isbn) {
        //first make sure the user hasn't checked out too many books
        //count the number of records in BookLoans that have the users card_id
        // AND where date_in is NULL (ie, haven't checked that book in yet)
        String getBookLoansForCardIdSQL = "SELECT COUNT(*) AS books_checked_out "
            + "FROM BookLoans "
            + "WHERE BookLoans.card_id = ? "
            + "AND BookLoans.date_in IS NULL ";

        int booksCheckedOut = 0;

        try (Connection conn = connect(); PreparedStatement pstmt = conn.prepareStatement(getBookLoansForCardIdSQL)) {
            pstmt.setInt(1, cardId);
            ResultSet rs = pstmt.executeQuery();
            while(rs.next()) {
                booksCheckedOut = rs.getInt("books_checked_out");
            }
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }

        if(booksCheckedOut > 3) {
            System.out.println("Error, That user has too many books checked out.");
            return;
        }

        //Ensure the book isn't checked out already
        List<Book> books = findBooksByIsbn(isbn);

        Book bookFound = books.get(0);

        if(bookFound.isCheckedOut()) {
            System.out.println("Error, That book is already checked out.");
            return;
        }

        String insertBookLoan = "INSERT INTO BookLoans(card_id, isbn10) "
            + "VALUES(?, ?)";

        try (Connection conn = connect(); PreparedStatement pstmt = conn.prepareStatement(insertBookLoan)) {
            pstmt.setInt(1, cardId);
            pstmt.setString(2 ,bookFound.getIsbn10());
            ResultSet rs = pstmt.executeQuery();
            //TODO Ensure the record was properly inserted.
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }

        String updateBookIsCheckedOut = "UPDATE Books SET is_checked_out = TRUE "
            + "WHERE Books.isbn10 = ? ";

        try (Connection conn = connect(); PreparedStatement pstmt = conn.prepareStatement(updateBookIsCheckedOut)) {
            pstmt.setString(1 , bookFound.getIsbn10());
            ResultSet rs = pstmt.executeQuery();
            //TODO Ensure the update went through.
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }

    }

    public List<Book> findBooksByIsbn(String isbn) {
        String SQL = "SELECT Books.isbn10, Books.title, Books.cover, Books.publisher, Books.pages, "
            + "Books.is_checked_out "
            + "FROM Books "
            + "JOIN Isbns ON Isbns.isbn10 = Books.isbn10 "
            + "WHERE Books.isbn10 = ? "
            + "OR Isbns.isbn13 = ?";

        List<Book> booksList = new ArrayList<>();

        try (Connection conn = connect(); PreparedStatement pstmt = conn.prepareStatement(SQL)) {
            pstmt.setString(1, isbn);
            pstmt.setString(2, isbn);

            ResultSet rs = pstmt.executeQuery();

            booksList = mapResultSetToBook(rs);
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }

        return booksList;

    }

    private List<Book> mapResultSetToBook(ResultSet rs) throws SQLException{
        ArrayList<Book> listOfBooks = new ArrayList<Book>();

        while (rs.next()) {
            Book book = new Book();
            book.setIsbn10(rs.getString("isbn10"));
            book.setTitle(rs.getString("title"));
            book.setCover(rs.getString("cover"));
            book.setPublisher(rs.getString("publisher"));
            book.setPages(rs.getInt("pages"));
            listOfBooks.add(book);
        }

        return listOfBooks;
    }

    private List<Borrower> mapResultSetToBorrower(ResultSet rs) throws SQLException{
        ArrayList<Borrower> listOfBorrowers = new ArrayList<Borrower>();

        while (rs.next()) {
            Borrower borrower = new Borrower();
            borrower.setCardId(rs.getInt("card_id"));
            borrower.setSsn(rs.getString("ssn"));
            borrower.setFirstName(rs.getString("first_name"));
            borrower.setLastName(rs.getString("last_name"));
            borrower.setEmail(rs.getString("email"));
            borrower.setAddress(rs.getString("address"));
            borrower.setCity(rs.getString("city"));
            borrower.setState(rs.getString("state"));
            borrower.setPhone(rs.getString("phone"));
            listOfBorrowers.add(borrower);
        }

        return listOfBorrowers;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CheckOutVerify_Continue;
    private javax.swing.JButton CheckOutVerify_NewUser;
    private javax.swing.JTextField CheckOutVerify_TextBox;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
