/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author Warren
 */
public class Fines extends javax.swing.JFrame {

    private final String url = "jdbc:postgresql://localhost:5434/postgres";
    private final String user = "zpillman";
    private final String password = "password";

    Fine[] finesList;

    /**
     * Creates new form Fines
     */
    public Fines(List<Fine> fines) {
        this.finesList = fines.toArray(new Fine[fines.size()]);
        initComponents();
    }

    public Connection connect() throws SQLException {
        return DriverManager.getConnection(url, user, password);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Fines_Paid = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList(finesList);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Fines");

        Fines_Paid.setText("Paid");
        Fines_Paid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Fines_PaidActionPerformed(evt);
            }
        });

        jList1.setCellRenderer(new FinesCellRenderer());
        jScrollPane1.setViewportView(jList1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 327, Short.MAX_VALUE)
                        .addComponent(Fines_Paid)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Fines_Paid)
                .addGap(4, 4, 4))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Fines_PaidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Fines_PaidActionPerformed
        Fine userSelectedFine = (Fine) jList1.getSelectedValue();

        //check if the book is checked in
        String checkIfCheckedInQuery = "SELECT * FROM Book_Loans "
            + "WHERE loan_id = ? "
            + "AND date_in IS NOT NULL";

        BookLoan bookLoan = null;

        try (Connection conn = connect(); PreparedStatement pstmt = conn.prepareStatement(checkIfCheckedInQuery)) {
            pstmt.setInt(1, userSelectedFine.getLoanId());

            ResultSet rs = pstmt.executeQuery();

            while(rs.next()) {
                bookLoan = new BookLoan();
                bookLoan.setDateOut(rs.getDate("date_out"));
                bookLoan.setDueDate(rs.getDate("due_date"));
                bookLoan.setLoanId(rs.getInt("loan_id"));
                bookLoan.setIsbn(rs.getString("isbn"));
                bookLoan.setCardId(rs.getInt("card_id"));
            }

        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }

        if(bookLoan == null) {
            JOptionPane.showMessageDialog(null,
                "Error, that book must be Checked-In before the fine can be paid",
                "Book Not Checked In",
                JOptionPane.ERROR_MESSAGE);
            return;
        }

        //mark the fine as paid
        String updateFineAsPaidQuery = "UPDATE fines SET is_paid = true "
            + "WHERE loan_id = ?";

        try (Connection conn = connect(); PreparedStatement pstmt = conn.prepareStatement(updateFineAsPaidQuery)) {
            pstmt.setInt(1, userSelectedFine.getLoanId());
            ResultSet rs = pstmt.executeQuery();
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }

        JOptionPane.showMessageDialog(null,
            "Successfully Paid",
            "Successfully Paid",
            JOptionPane.INFORMATION_MESSAGE);

        Library library = new Library();
        library.setVisible(true);
        dispose();
    }//GEN-LAST:event_Fines_PaidActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Fines_Paid;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
